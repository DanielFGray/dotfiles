#!/usr/bin/env bash

# if [[ -e "${HOME}/.bash_utils" ]]; then
#   source "${HOME}/.bash_utils"
# else
#   printf '\e[31m~/.bash_utils does not exist\e[0m\n' >&2
#   exit 1
# fi

declare -A colors
colors[red]=$(tput setaf 1)
colors[green]=$(tput setaf 2)
colors[blue]=$(tput setaf 4)
colors[reset]=$(tput sgr0)

in_term() {
  [[ -t 0 || -p /dev/stdin ]]
}

is_running() {
  pgrep "$1" &> /dev/null
}

info() {
  color green "$@" >&2
}

color() {
  local c
  c="$1"
  shift
  printf '%s' "${colors[$c]}" >&2
  printf '%s\n' "$@" >&2
  printf '%s' "${colors[reset]}" >&2
}

err() {
  color red "$@" >&2
}

die() {
  [[ -n "$1" ]] && err "$1"
  exit 1
}

has() {
  local verbose
  if [[ $1 = '-v' ]]; then
    verbose=1
    shift
  fi
  for c; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      (( "$verbose" > 0 )) && err "$c not found"
      return 1
    fi
  done
}

ask() {
  read -r -n1 -p "$* " ans
  printf '\n'
  [[ ${ans^} = Y* ]]
}

prompt() {
  local opts=() one
  if [[ "$1" = '-1' ]]; then
    opts+=( '-n1' )
    one=1
    shift
  fi
  if [[ "$1" = '-s' ]]; then
    opts+=( '-s' )
    shift
  fi
  read -e -r "${opts[@]}" -p "$* " ans
  if [[ $one = '1' ]]; then
    printf '\n'
    [[ ${ans,} = y ]]
  else
    printf '%s\n' "$ans"
  fi
}

select_from() {
  local cmd='command -v'
  for a; do
    case "$a" in
      -c)
        cmd="$2"
        shift 2
        ;;
    esac
  done
  for c; do
    if $cmd "${c%% *}" &> /dev/null; then
      echo "$c"
      return 0
    fi
  done
  return 1
}
