#!/usr/bin/env bash

declare esc=$(printf '\033')
declare c_reset="${esc}[0m"
declare c_red="${esc}[31m"
declare c_green="${esc}[32m"
declare c_blue="${esc}[34m"

inTerm() {
  [[ -t 0 || -p /dev/stdin ]]
}

isRunning() {
  pgrep $1 &> /dev/null
}

info() {
  if inTerm; then
    echo -e "${c_blue}$1${c_reset}" >&2
  else
    zenity --info --text="$*"
  fi
}

err() {
  if inTerm; then
    echo -e "${c_red}$1${c_reset}" >&2
  else
    zenity --error --text="$*"
  fi
}

die() {
  [[ -n "$1" ]] && err "$1"
  exit 1
}

has() {
  local verbose=false
  if [[ $1 == '-v' ]]; then
    verbose=true
    shift
  fi
  for c in "$@"; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      [[ "$verbose" == true ]] && err "$c not found"
      return 1
    fi
  done
}

ask() {
  if inTerm; then
    read -r -n1 -p "$* " ans
    echo
    [[ ${ans^} == Y* ]]
  else
    zenity --question --text="$*"
  fi
}

prompt() {
  local opts=() one
  if [[ "$1" == '-1' ]]; then
    opts+=( '-n1' )
    one=1
    shift
  fi
  if [[ "$1" == '-s' ]]; then
    opts+=( '-s' )
    shift
  fi
  read -e -r ${opts[*]} -p "$* " ans
  if [[ $one == '1' ]]; then
    echo
    [[ ${ans,} == y ]]
  else
    echo "$ans"
  fi
}

select-from() {
  local cmd='command -v'
  for a in "$@"; do
    case "$a" in
      -c)
        cmd="$2"
        shift 2
        ;;
    esac
  done
  for c in "$@"; do
    if $cmd $c &> /dev/null; then
      echo "$c"
      return 0
    fi
  done
  return 1
}
