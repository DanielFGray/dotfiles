#!/usr/bin/env bash

declare file="$(date +%F-%s).webm"
declare window=false
declare region=false
declare duration
declare delay=0
declare verbose
declare -A dimensions
declare -r esc=$'\033'
declare -r c_reset="${esc}[0m"
declare -r c_red="${esc}[31m"

usage() {
  LESS=-FEXR less <<'HELP'
'Usage: record [OPTIONS]
  -h  this help
  -f  specify file name [defaults to "$(date +%F-%s).webm"]
  -F  specify file name and overwrite if exists
  -d  specify duration
  -D  specify delay
  -w  select window
  -s  draw selectable region
  -v  show verbose output from ffmpeg'
# -k  display keystrokes during recording
HELP
}

err() {
  printf "${c_red}%s${c_reset}\n" "$*" >&2
}

die() {
  [[ -n "$1" ]] && err "$1"
  exit 1
}

has() {
  local verbose=false
  if [[ $1 == '-v' ]]; then
    verbose=true
    shift
  fi
  for c in "$@"; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      [[ "$verbose" == true ]] && err "$c not found"
      return 1
    fi
  done
}

select_from() {
  local cmd='command -v'
  for a in "$@"; do
    case "$a" in
      -c) cmd="$2"; shift 2 ;;
    esac
  done
  for c in "$@"; do
    if $cmd "${c%% *}" &> /dev/null; then
      echo "$c"
      return 0
    fi
  done
  return 1
}

ask() {
  read -r -n1 -p "$* " ans
  printf '\n'
  [[ ${ans^} == Y* ]]
}

delay() {
  for (( i=delay; i>0; --i )); do
    printf '%s..                     \r' "$i"
    sleep 1
  done
  printf 'recording                \r'
}

get_dimensions() {
  if [[ "$window" == true ]]; then
    local xwininfo x y w h seltool
    printf 'click a window\r'
    xwininfo=$(xwininfo)
    read -r x y w h < <(awk -F':' '/Absolute upper-left X/ { x=$2 }
      /Absolute upper-left Y/ { y=$2 }
      /Width/ { w=$2 }
      /Height/ { h=$2 }
      END { print x, y, w, h }' <<< "$xwininfo")
    dimensions=( ['x']="$x" ['y']="$y" ['w']="$w" ['h']="$h" )
  elif [[ "$region" == true ]]; then
    seltool=$(select_from 'slop -b 1 -f' xrectsel) || die 'xrectsel or slop required for -s'
    printf 'select a region\r'
    eval "dimensions=( $($seltool "['x']='%x' ['y']='%y' ['w']='%w' ['h']='%h'") )"
  else
    scrsize=$(xdpyinfo | awk '/dimensions/{print $2}')
    dimensions=( ['x']='0' ['y']='0' ['w']="${scrsize%%x*}" ['h']="${scrsize#*x}" )
  fi
}

record_byzanz() {
  #TODO: remove byzanz altogether in favor of plain ffmpeg
  byzanz-record \
    --duration="${duration:-10}" \
    --x="${dimensions['x']}" \
    --y="${dimensions['y']}" \
    --width="${dimensions['w']}" \
    --height="${dimensions['h']}" \
    "$file" &&
  printf 'saved as %s\n' "$file"
}

record_ffmpeg() {
  local loglevel size offset
  loglevel='panic'
  [[ -n $verbose ]] && loglevel='info'
  size="${dimensions['w']}x${dimensions['h']}"
  offset="${DISPLAY}.0+${dimensions['x']},${dimensions['y']}"
  ffmpeg -y -loglevel "$loglevel" \
    -f x11grab \
    -s "$size" \
    -i "$offset" \
    ${duration:+-t $duration} \
    -c:v libvpx \
    -b:v 2400k \
    -preset veryslow \
    -r 60 \
    -threads 4 \
    -pix_fmt yuv444p \
    -f webm "$file" &&
  printf 'saved as %s\n' "$file"
}

OPTERR=0
while getopts "f:F:d:D:swh" opt; do
  case "$opt" in
    f) file="$OPTARG"; overwrite=false ;;
    F) file="$OPTARG"; overwrite=true ;;
    w) window=true; region=false ;;
    s) window=false; region=true ;;
    v) verbose=true ;;
    d) duration="$OPTARG" ;;
    D) delay="$OPTARG" ;;
  #  k) screenkeys=true ;;
    h) usage; exit 0 ;;
  esac
done

[[ -z "$DISPLAY" ]] && die 'could not grab DISPLAY'

if [[ -f "$file" && "$overwrite" == false ]] && ! ask "overwrite ${file}? "; then
  die
fi

get_dimensions
case "$file" in
  *gif)
    has byzanz-record || die 'need byzanz-record for recording gifs'
    delay
    record_byzanz ;;
  *webm)
    has ffmpeg || die 'need ffmpeg for recording webms'
    delay
    record_ffmpeg ;;
  *) die 'unknown file type, must be gif or webm' ;;
esac
